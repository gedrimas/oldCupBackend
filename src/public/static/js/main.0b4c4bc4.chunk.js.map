{"version":3,"sources":["api/api.ts","reduxAppStore/reducers/errorSlice.ts","reduxAppStore/reducers/sectionSlice.ts","reduxAppStore/reducers/contactsSlice.ts","reduxAppStore/reducers/langSlice.ts","reduxAppStore/reducers/advertsSlice.ts","reduxAppStore/reducers/modalSlice.ts","reduxAppStore/reducers/loginSlice.ts","reduxAppStore/rootReducer.ts","reduxAppStore/store.ts","components/sharedComponents/Login.tsx","icons/ru.svg","icons/ee.svg","components/sharedComponents/LangSwicher.tsx","components/sharedComponents/ModalForms/LoginForm.tsx","components/sharedComponents/ModalForms/ContactsInfoForm.tsx","components/sharedComponents/ModalForms/index.tsx","components/sharedComponents/Modal.tsx","components/infoContacts/InfoContacts.tsx","styles/materialCustomStyles.ts","components/sectionMenu/SectionMenu.tsx","components/advert/ImageKit.js","components/advert/AdvertCard.tsx","components/advert/AdvertBlock.tsx","components/advert/advertPage/AdvertPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiRespType","response","status","Api","method","url","payload","options","a","axios","message","endpoint","body","errorSlice","createSlice","name","initialState","errorInfo","isError","reducers","setError","state","action","clearError","actions","sectionSlice","allsections","pending","activeSection","setSections","setPending","setActiveSection","contactSlice","contacts","setContacts","langSlice","lang","changeLang","advertsSlice","allAdverts","setAllAdverts","modalSlice","isOpen","modalContentType","openModal","closeModal","setModalContentType","loginSlice","isLogin","setLogin","dropLogin","rootReducer","combineReducers","sections","error","language","advertisements","modal","login","store","configureStore","reducer","Login","Grid","item","id","onClick","fontSize","style","cursor","LangSwicher","dispatch","useDispatch","currentLanguage","useSelector","src","ru","ee","alt","LoginForm","useState","password","namePass","setNamePass","loginError","setLoginError","handleChange","val","handleSubmit","event","preventDefault","token","sessionStorage","getItem","console","log","sendRequest","onSubmit","container","direction","alignItems","TextField","label","value","onChange","target","marginTop","type","ButtonGroup","size","Button","ContactsInfoForm","sate","email","phone","_id","contactsInfo","setContactsInfo","modalContent","loginForm","contactsInfoForm","Modal","prop","content","open","contentType","Dialog","onClose","aria-labelledby","justify","padding","InfoContacts","useEffect","contact","data","infoContacts","length","info","isModalOpen","className","wrap","textAlign","marginLeft","marginRight","color","useStyles","makeStyles","customChip","borderWidth","advertPaper","margin","advertInfoPaper","advertInfoContent","price","SectionMenu","classes","firstSectionId","getAdvertsOfFirstSection","adverts","ref","useRef","current","getAdverts","map","Chip","sectionId","variant","borderColor","boxShadow","ImageKit","props","photoUrl","width","urlEndpoint","display","path","transformation","height","AdvertCard","mainPhotoUrl","advertId","photoWidth","to","Card","CardActionArea","CardContent","Typography","gutterBottom","component","AdvertBlock","imgContainerWidth","setImgContainerWidth","createRef","containerWidth","clientWidth","fake","cards","mainPhoto","normalizeAdvertArray","AdvertPage","useParams","advert","filter","advertInfo","Paper","elevation","xs","Divider","orientation","flexItem","allPhotos","i","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b4c4bc4.chunk.js","sourcesContent":["import axios, { AxiosRequestConfig } from 'axios'\nimport { ResponsesTypes } from './responsesTypes'\nimport { Methods, Urls } from './paramsTypes'\n\ntype Response<U> = U extends ResponsesTypes ? U : never\n\nexport interface AxiosResponse<U extends ResponsesTypes> {\n  data: Response<U>\n  status: number\n  statusText: string\n  headers: any\n  config: AxiosRequestConfig\n}\n\nexport interface ApiError {\n  message: string\n  endpoint: string\n  method: string\n}\n\nexport function apiRespType<T extends ResponsesTypes>(\n  response: AxiosResponse<T> | ApiError,\n): response is AxiosResponse<T> {\n  return (response as AxiosResponse<T>).status === 200\n}\n\n//Sends request and returns typed response in 'response' property or Error info\nexport default class Api<U extends ResponsesTypes> {\n  constructor(\n    public method: Methods,\n    public url: Urls,\n    public payload?: any,\n    public options?: any,\n  ) {}\n\n  public sendRequest() {\n    return (async () => {\n      switch (this.method) {\n        case 'get': {\n          try {\n            const response = await axios[this.method]<Response<U>>(\n              `http://localhost:3001/${this.url}`,\n            )\n            return response\n          } catch (error) {\n            return {\n              message: error.message,\n              endpoint: this.url,\n              method: this.method,\n            }\n          }\n        }\n        case 'post': {\n          try {\n            const response = await axios[this.method]<Response<U>>(\n              `http://localhost:3001/${this.url}`,\n              this.payload,\n              this.options,\n            )\n            return response\n          } catch (error) {\n            return {\n              message: error.message,\n              endpoint: this.url,\n              method: this.method,\n              body: this.payload,\n            }\n          }\n        }\n        case 'put': {\n          try {\n            const response = await axios[this.method]<Response<U>>(\n              `http://localhost:3001/${this.url}`,\n              this.payload,\n              this.options,\n            )\n            return response\n          } catch (error) {\n            return {\n              message: error.message,\n              endpoint: this.url,\n              method: this.method,\n              body: this.payload,\n            }\n          }\n        }\n      }\n    })()\n  }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport interface SliceError {\n  errorInfo: {\n    message: string | null\n    endpoint: string | null\n    method: string | null\n    body?: object\n  }\n  isError: boolean\n}\n\nconst initialState: SliceError = {\n  errorInfo: {\n    message: null,\n    endpoint: null,\n    method: null,\n  },\n  isError: false,\n}\n\n/******************************************************************************\n *                      Redux store: error\n ******************************************************************************/\n\nconst errorSlice = createSlice({\n  name: 'errorSlice',\n  initialState,\n  reducers: {\n    //set Error info\n    setError(state, action: PayloadAction<SliceError['errorInfo']>) {\n      state.errorInfo = action.payload\n      state.isError = true\n    },\n    //drop Error\n    clearError(state) {\n      state.errorInfo = {\n        message: null,\n        endpoint: null,\n        method: null,\n      }\n      state.isError = false\n    },\n  },\n})\nexport type SetError = typeof setError\nexport const { setError, clearError } = errorSlice.actions\nexport default errorSlice.reducer\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk } from '../store'\nimport { Sections } from '../../api/responsesTypes'\nimport Api, { apiRespType } from '../../api/api'\nimport { setError } from './errorSlice'\n\ninterface SlicseSrctions extends Sections {\n  pending: boolean\n  activeSection: string\n}\n\nconst initialState: SlicseSrctions = {\n  allsections: [],\n  pending: false,\n  activeSection: '',\n}\n\n/******************************************************************************\n *                      Redux store: sections\n ******************************************************************************/\n\nconst sectionSlice = createSlice({\n  name: 'sectionSlice',\n  initialState,\n  reducers: {\n    //set sections action\n    setSections(state, action: PayloadAction<Sections['allsections']>) {\n      state.allsections = action.payload\n    },\n    //pending status action\n    setPending(state, action: PayloadAction<boolean>) {\n      state.pending = action.payload\n    },\n    //set active section\n    setActiveSection(state, action: PayloadAction<string>) {\n      state.activeSection = action.payload\n    },\n  },\n})\nexport const { setSections, setPending, setActiveSection } =\n  sectionSlice.actions\nexport default sectionSlice.reducer\n\n//fetch data and put into Redux store (into srctions)\nexport const fetchSections = (): AppThunk => async (dispatch) => {\n  try {\n    //set up pending true\n    dispatch(setPending(true))\n\n    //fetch data\n    const response = await new Api<Sections>('get', 'allsections').sendRequest()\n\n    //if response error\n    if (!apiRespType(response)) {\n      throw response\n    }\n\n    //get sections from response\n    const {\n      data: { allsections: sections },\n    } = response\n\n    //put data into Redux store (sections)\n    dispatch(setSections(sections))\n  } catch (error) {\n    //set Error info Redux store (error)\n    dispatch(setError(error))\n  } finally {\n    //set up pending false\n    dispatch(setPending(false))\n  }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk } from '../store'\nimport { Contacts } from '../../api/responsesTypes'\nimport Api, { apiRespType } from '../../api/api'\nimport { setError } from './errorSlice'\n\ninterface SlicseContacts extends Contacts {\n  pending: boolean\n}\n\nconst initialState: SlicseContacts = {\n  contacts: [],\n  pending: false,\n}\n\n/******************************************************************************\n *                      Redux store: contacts\n ******************************************************************************/\n\nconst contactSlice = createSlice({\n  name: 'contactSlice',\n  initialState,\n  reducers: {\n    //set contacts action\n    setContacts(state, action: PayloadAction<Contacts['contacts']>) {\n      state.contacts = action.payload\n    },\n    //pending status action\n    setPending(state, action: PayloadAction<boolean>) {\n      state.pending = action.payload\n    },\n  },\n})\nexport const { setContacts, setPending } = contactSlice.actions\nexport default contactSlice.reducer\n\n//fetch data and put into Redux store (into contacts)\nexport const fetchContacts = (): AppThunk => async (dispatch) => {\n  try {\n    //set up pending true\n    dispatch(setPending(true))\n\n    //fetch data\n    const response = await new Api<Contacts>('get', 'contacts').sendRequest()\n\n    //if response error\n    if (!apiRespType(response)) {\n      throw response\n    }\n\n    const {\n      data: { contacts: contact },\n    } = response\n\n    //put data into Redux store\n    dispatch(setContacts(contact))\n\n    //set up pending false\n    dispatch(setPending(false))\n  } catch (error) {\n    //set Error info Redux store (error)\n    dispatch(setError(error))\n  } finally {\n    //set up pending false\n    dispatch(setPending(false))\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport type Lang = 'ru' | 'ee';\nexport const ruLang = 'ru';\nexport const eeLang = 'ee';\n\nexport interface SliceLang {\n  lang: Lang;\n}\n\nconst initialState: SliceLang = {\n  lang: 'ru',\n};\n\n/******************************************************************************\n *                      Redux store: lang\n ******************************************************************************/\n\nconst langSlice = createSlice({\n  name: 'langSlice',\n  initialState,\n  reducers: {\n    //change language action\n    changeLang(state) {\n      state.lang = state.lang === 'ru' ? eeLang : ruLang;\n    },\n  },\n});\nexport const { changeLang } = langSlice.actions;\nexport default langSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { Advert } from '../../api/responsesTypes'\n\nexport interface SliceAdverts {\n  allAdverts: Advert[]\n  pending: boolean\n}\n\nconst initialState: SliceAdverts = {\n  allAdverts: [],\n  pending: false,\n}\n\n/******************************************************************************\n *                      Redux store: Adverts\n ******************************************************************************/\n\nconst advertsSlice = createSlice({\n  name: 'advertsSlice',\n  initialState,\n  reducers: {\n    //put all adverts into Redux store\n    setAllAdverts(state, action: PayloadAction<Advert[]>) {\n      state.allAdverts = action.payload\n    },\n    //pending status action\n    setPending(state, action: PayloadAction<boolean>) {\n      state.pending = action.payload\n    },\n  },\n})\nexport const { setAllAdverts, setPending } = advertsSlice.actions\nexport default advertsSlice.reducer\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { ModalContentTypes } from '../../components/sharedComponents/ModalForms'\n\nexport interface SliceLang {\n  isOpen: boolean\n  modalContentType: ModalContentTypes | null\n}\n\nconst initialState: SliceLang = {\n  isOpen: false,\n  modalContentType: null,\n}\n\n/******************************************************************************\n *                      Redux store: modal\n ******************************************************************************/\n\nconst modalSlice = createSlice({\n  name: 'modalSlice',\n  initialState,\n  reducers: {\n    //open modal action\n    openModal(state) {\n      state.isOpen = true\n    },\n\n    //close modal action\n    closeModal(state) {\n      state.isOpen = false\n    },\n\n    //chose wich from or info to be viwed in modal\n    setModalContentType(state, action: PayloadAction<ModalContentTypes>) {\n      state.modalContentType = action.payload\n    },\n  },\n})\nexport const { openModal, closeModal, setModalContentType } = modalSlice.actions\nexport default modalSlice.reducer\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport interface SliceLogin {\n  isLogin: boolean\n}\n\nconst initialState: SliceLogin = {\n  isLogin: false,\n}\n\n/******************************************************************************\n *                      Redux store: login\n ******************************************************************************/\n\nconst loginSlice = createSlice({\n  name: 'loginSlice',\n  initialState,\n  reducers: {\n    //set login\n    setLogin(state) {\n      state.isLogin = true\n    },\n    //drop login\n    dropLogin(state) {\n      state.isLogin = false\n    },\n  },\n})\n\nexport const { setLogin, dropLogin } = loginSlice.actions\nexport default loginSlice.reducer\n","import { combineReducers } from '@reduxjs/toolkit'\nimport sections from './reducers/sectionSlice'\nimport error from './reducers/errorSlice'\nimport contacts from './reducers/contactsSlice'\nimport language from './reducers/langSlice'\nimport advertisements from './reducers/advertsSlice'\nimport modal from './reducers/modalSlice'\nimport login from './reducers/loginSlice'\n\nconst rootReducer = combineReducers({\n  contacts,\n  sections,\n  error,\n  language,\n  advertisements,\n  modal,\n  login,\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\nexport default rootReducer\n","import { configureStore, Action } from '@reduxjs/toolkit';\nimport { ThunkAction } from 'redux-thunk';\nimport rootReducer, { RootState } from './rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>;\nexport default store;\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport '../../styles/App.css'\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle'\n\ninterface LoginOut {\n  login: () => void\n}\n\nconst Login: React.FC<LoginOut> = ({ login }) => {\n  return (\n    <Grid item id=\"loginIcon\" onClick={login}>\n      <AccountCircleIcon fontSize=\"large\" style={{ cursor: 'pointer' }} />\n    </Grid>\n  )\n}\n\nexport default Login\n","export default __webpack_public_path__ + \"static/media/ru.c89ed68a.svg\";","export default __webpack_public_path__ + \"static/media/ee.dafcc141.svg\";","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../reduxAppStore/rootReducer';\nimport Grid from '@material-ui/core/Grid';\nimport ru from '../../icons/ru.svg';\nimport ee from '../../icons/ee.svg';\nimport { changeLang } from '../../reduxAppStore/reducers/langSlice';\nimport '../../styles/App.css';\n\nconst LangSwicher: React.FC = () => {\n  const dispatch = useDispatch();\n\n  //get current language from Redux store\n  const currentLanguage = useSelector(\n    (state: RootState) => state.language.lang\n  );\n\n  //select language icon baised on value from Redux store\n  const selectLangIcon = () => {\n    if (currentLanguage === 'ru') {\n      return ru;\n    }\n    return ee;\n  };\n\n  //change language\n  const changeLanguage = () => {\n    dispatch(changeLang());\n  };\n\n  return (\n    <Grid item id=\"langIcon\" onClick={changeLanguage}>\n      <img src={selectLangIcon()} alt=\"ru\" />\n    </Grid>\n  );\n};\n\nexport default LangSwicher;\n","import { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\nimport Grid from '@material-ui/core/Grid'\nimport Api, { apiRespType } from '../../../api/api'\nimport { closeModal } from '../../../reduxAppStore/reducers/modalSlice'\nimport { setLogin } from '../../../reduxAppStore/reducers/loginSlice'\n\ninterface FormFilds {\n  name?: string\n  password?: string\n}\n\nconst LoginForm: React.FC = () => {\n  const [namePass, setNamePass] = useState<FormFilds>({\n    name: '',\n    password: '',\n  })\n  const [loginError, setLoginError] = useState(false)\n\n  const dispatch = useDispatch()\n\n  //set user input to component state\n  const handleChange = (val: FormFilds) => {\n    setNamePass({ ...namePass, ...val })\n  }\n\n  const handleSubmit = async (event: any) => {\n    event.preventDefault()\n    try {\n      const token = sessionStorage.getItem('ExpressGeneratorTs')\n      console.log('token', token)\n\n      // send login request\n      const response = await new Api('post', 'login', namePass).sendRequest()\n\n      //if response error\n      if (!apiRespType(response)) {\n        throw response\n      }\n\n      //set login true to view edition elements\n      dispatch(setLogin())\n\n      //close login moadl\n      dispatch(closeModal())\n    } catch (error) {\n      //highlight input fields as error\n      setLoginError(true)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Grid container direction=\"column\" alignItems=\"center\">\n        <h4>Stuff only</h4>\n        <TextField\n          error={loginError}\n          label=\"Login\"\n          value={namePass.name}\n          onChange={(event) => handleChange({ name: event.target.value })}\n        />\n        <TextField\n          error={loginError}\n          style={{ marginTop: '0.5rem' }}\n          label=\"Password\"\n          type=\"password\"\n          value={namePass.password}\n          onChange={(event) => handleChange({ password: event.target.value })}\n        />\n        <ButtonGroup size=\"small\" style={{ marginTop: '1rem' }}>\n          <Button type=\"submit\">Ok</Button>\n          <Button onClick={() => dispatch(closeModal())}>Close</Button>\n        </ButtonGroup>\n      </Grid>\n    </form>\n  )\n}\n\nexport default LoginForm\n","import { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\nimport Grid from '@material-ui/core/Grid'\nimport Api, { apiRespType } from '../../../api/api'\nimport { closeModal } from '../../../reduxAppStore/reducers/modalSlice'\nimport { RootState } from '../../../reduxAppStore/rootReducer'\n\ninterface FormFilds {\n  email?: string\n  phone?: string\n  ee?: string\n  ru?: string\n  _id?: string\n}\n\nconst ContactsInfoForm: React.FC = () => {\n  //get current contacts and info from Redux store\n  const currentContactsInfo = useSelector(\n    (sate: RootState) => sate.contacts.contacts,\n  )\n  const { email, phone, ee, ru, _id } = currentContactsInfo[0]\n\n  //set current contacts & info data to components local state\n  const [contactsInfo, setContactsInfo] = useState<FormFilds>({\n    email,\n    phone,\n    ee,\n    ru,\n    _id,\n  })\n\n  const dispatch = useDispatch()\n\n  //set user input to component state\n  const handleChange = (val: FormFilds) => {\n    setContactsInfo({ ...contactsInfo, ...val })\n  }\n\n  const handleSubmit = async (event: any) => {\n    event.preventDefault()\n    try {\n      // send request to update contacts & info\n      const response = await new Api(\n        'put',\n        'contacts',\n        contactsInfo,\n      ).sendRequest()\n\n      //if response error\n      if (!apiRespType(response)) {\n        throw response\n      }\n\n      //close login moadl\n      dispatch(closeModal())\n    } catch (error) {\n      //highlight input fields as error\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Grid container direction=\"column\" alignItems=\"center\">\n        <h4>Contacts & Info</h4>\n        <TextField\n          label=\"Phone\"\n          value={contactsInfo.phone}\n          onChange={(event) => handleChange({ phone: event.target.value })}\n        />\n        <TextField\n          style={{ marginTop: '0.5rem' }}\n          label=\"Email\"\n          value={contactsInfo.email}\n          onChange={(event) => handleChange({ email: event.target.value })}\n        />\n        <TextField\n          style={{ marginTop: '0.5rem' }}\n          label=\"info(Ru)\"\n          value={contactsInfo.ru}\n          onChange={(event) => handleChange({ ru: event.target.value })}\n        />\n        <TextField\n          style={{ marginTop: '0.5rem' }}\n          label=\"info(Ee)\"\n          value={contactsInfo.ee}\n          onChange={(event) => handleChange({ ee: event.target.value })}\n        />\n        <ButtonGroup size=\"small\" style={{ marginTop: '1rem' }}>\n          <Button type=\"submit\">Ok</Button>\n          <Button onClick={() => dispatch(closeModal())}>Close</Button>\n        </ButtonGroup>\n      </Grid>\n    </form>\n  )\n}\n\nexport default ContactsInfoForm\n","import { ReactElement } from 'react'\nimport LoginForm from './LoginForm'\nimport ContactsInfoForm from './ContactsInfoForm'\n\ninterface ModalContent {\n  loginForm: ReactElement<any, any>\n  contactsInfoForm: ReactElement<any, any>\n}\n\nconst modalContent: ModalContent = {\n  loginForm: <LoginForm />,\n  contactsInfoForm: <ContactsInfoForm />,\n}\n\nexport type ModalContentTypes = keyof ModalContent\n\nexport default modalContent\n","import { ReactElement } from 'react'\nimport Dialog from '@material-ui/core/Dialog'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { closeModal } from '../../reduxAppStore/reducers/modalSlice'\nimport Grid from '@material-ui/core/Grid'\nimport modalContent from './ModalForms'\nimport { RootState } from '../../reduxAppStore/rootReducer'\n\nexport interface SimpleDialogProps {\n  open: boolean\n}\n\nexport default function Modal(prop: SimpleDialogProps) {\n  const { open } = prop\n  const dispatch = useDispatch()\n\n  const contentType = useSelector(\n    (state: RootState) => state.modal.modalContentType,\n  )\n\n  let content!: ReactElement<any, any>\n\n  //chose content for modal\n  if (contentType) content = modalContent[contentType]\n\n  //close modal\n  const handleClose = () => {\n    dispatch(closeModal())\n  }\n\n  return (\n    <Dialog\n      onClose={handleClose}\n      aria-labelledby=\"simple-dialog-title\"\n      open={open}\n    >\n      <Grid container justify=\"center\" style={{ padding: '1rem' }}>\n        {content}\n      </Grid>\n    </Dialog>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Grid from '@material-ui/core/Grid'\nimport PhoneIcon from '@material-ui/icons/Phone'\nimport EmailIcon from '@material-ui/icons/Email'\nimport { fetchContacts } from '../../reduxAppStore/reducers/contactsSlice'\nimport { RootState } from '../../reduxAppStore/rootReducer'\nimport '../../styles/App.css'\nimport Login from '../sharedComponents/Login'\nimport LangSwicher from '../sharedComponents/LangSwicher'\nimport Modal from '../sharedComponents/Modal'\nimport {\n  openModal,\n  setModalContentType,\n} from '../../reduxAppStore/reducers/modalSlice'\nimport EditIcon from '@material-ui/icons/Edit'\n\nconst InfoContacts: React.FC = () => {\n  const dispatch = useDispatch()\n\n  //fetch data for InfoContacts component\n  useEffect(() => {\n    dispatch(fetchContacts())\n  }, [dispatch])\n\n  //get contacts from Redux store\n  const contacts = useSelector((state: RootState) => state.contacts.contacts)\n\n  //get current language from Redux store\n  const currentLanguage = useSelector((state: RootState) => state.language.lang)\n\n  const parseDataForHeader = () => {\n    if (contacts.length) {\n      return {\n        //get info according current language\n        info: contacts[0][currentLanguage],\n        phone: contacts[0].phone,\n        email: contacts[0].email,\n      }\n    }\n    return null\n  }\n\n  //data for header\n  const infoContacts = parseDataForHeader()\n\n  //get modal status\n  const isModalOpen = useSelector((state: RootState) => state.modal.isOpen)\n\n  //open login modal and set content type for modal\n  function loginAsAdmin() {\n    dispatch(setModalContentType('loginForm'))\n    dispatch(openModal())\n  }\n\n  //open contacts & info editing modal\n  function editContacts() {\n    dispatch(setModalContentType('contactsInfoForm'))\n    dispatch(openModal())\n  }\n\n  return (\n    <div className=\"InfoContact-wrapper\">\n      <Modal open={isModalOpen} />\n      <Grid container justify=\"space-between\" wrap=\"nowrap\">\n        <LangSwicher />\n        <Grid container alignItems=\"center\" justify=\"center\">\n          <span style={{ textAlign: 'center' }}>{infoContacts?.info}</span>\n        </Grid>\n        <Login login={loginAsAdmin} />\n      </Grid>\n      <Grid container justify=\"center\">\n        <Grid item>\n          <Grid container>\n            <PhoneIcon />\n            <span>{infoContacts?.phone}</span>\n          </Grid>\n        </Grid>\n        <Grid item style={{ marginLeft: '0.5rem' }}>\n          <Grid container>\n            <EmailIcon style={{ marginRight: '0.2rem' }} />\n            <span>{infoContacts?.email}</span>\n            <EditIcon\n              style={{\n                marginLeft: '0.3rem',\n                color: 'ff4d76',\n                cursor: 'pointer',\n              }}\n              onClick={editContacts}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default InfoContacts\n","import { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n  customChip: () => ({\n    borderWidth: '3px',\n    color: '#5d5d5f',\n  }),\n  advertPaper: () => ({\n    margin: '1rem',\n  }),\n  advertInfoPaper: () => ({\n    padding: '0.5rem',\n    color: '#5d5d5f',\n  }),\n  advertInfoContent: () => ({\n    margin: '0 1rem',\n    '& span': {\n      fontSize: '1.3rem',\n    },\n  }),\n  price: () => ({\n    marginLeft: '0.5rem',\n  }),\n})\n\nexport default useStyles\n","import React, { useEffect, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Chip from '@material-ui/core/Chip'\nimport useStyles from '../../styles/materialCustomStyles'\nimport '../../styles/App.css'\nimport {\n  fetchSections,\n  setActiveSection,\n} from '../../reduxAppStore/reducers/sectionSlice'\nimport { RootState } from '../../reduxAppStore/rootReducer'\nimport { Adverts } from '../../api/responsesTypes'\nimport Api, { apiRespType } from '../../api/api'\nimport {\n  setAllAdverts,\n  setPending,\n} from '../../reduxAppStore/reducers/advertsSlice'\nimport { setError } from '../../reduxAppStore/reducers/errorSlice'\n\nconst SectionMenu: React.FC = () => {\n  const dispatch = useDispatch()\n  const classes = useStyles()\n\n  //fetch data for sectionMenu component\n  useEffect(() => {\n    dispatch(fetchSections())\n  }, [dispatch])\n\n  //get sections form Redux store\n  const sections = useSelector((state: RootState) => state.sections.allsections)\n\n  //get current language from Redux store\n  const currentLanguage = useSelector((state: RootState) => state.language.lang)\n\n  //get active section from Redux store\n  const activeSection = useSelector(\n    (state: RootState) => state.sections.activeSection,\n  )\n\n  //highLight section if it's chosen\n  const highLightSection = (sectionId: string) => {\n    if (sectionId === activeSection) {\n      return {\n        borderColor: 'rgba(0, 204, 255, 0.77)',\n        borderWidth: '3px',\n        boxShadow: '1px 2px 31px -4px rgba(31,232,239,0.92)',\n      }\n    }\n    return { borderWidth: '3px' }\n  }\n\n  //chose a section\n  const choseSection = (sectionId: string) => {\n    dispatch(setActiveSection(sectionId))\n  }\n\n  //fetch adverts of first section for display them as default\n  useEffect(() => {\n    if (!sections) return\n    const firstSectionId = sections[0]?._id\n\n    async function getAdvertsOfFirstSection() {\n      try {\n        dispatch(setPending(true))\n        //fetch data\n        const response = await new Api<Adverts>(\n          'get',\n          `adverts/${firstSectionId}`,\n        ).sendRequest()\n\n        //if response error\n        if (!apiRespType(response)) {\n          throw response\n        }\n\n        //get adverts fron response\n        const {\n          data: { allAdverts: adverts },\n        } = response\n\n        //put data into Redux store (adverts)\n        dispatch(setAllAdverts(adverts))\n      } catch (error) {\n        //set Error info Redux store (error)\n        dispatch(setError(error))\n      } finally {\n        dispatch(setPending(false))\n      }\n    }\n    getAdvertsOfFirstSection()\n\n    //and highlight appropriate section\n    dispatch(setActiveSection(firstSectionId))\n  }, [sections, dispatch])\n\n  const ref = useRef(false)\n\n  //fetch adverts according to the chosen section and put them in Redux store\n  useEffect(() => {\n    async function getAdverts() {\n      try {\n        //fetch data\n        const response = await new Api<Adverts>(\n          'get',\n          `adverts/${activeSection}`,\n        ).sendRequest()\n\n        //if response error\n        if (!apiRespType(response)) {\n          throw response\n        }\n\n        //get adverts from response\n        const {\n          data: { allAdverts: adverts },\n        } = response\n\n        //put adverts to Reux store\n        dispatch(setAllAdverts(adverts))\n      } catch (error) {\n        //set Error info Redux store (error)\n        dispatch(setError(error))\n      } finally {\n        dispatch(setPending(false))\n      }\n    }\n\n    //blok request after first render\n    if (ref.current) {\n      getAdverts()\n    } else {\n      ref.current = true\n    }\n  }, [activeSection, dispatch])\n\n  //make sections chip-buttons from sections array\n  function sectionsComponents() {\n    return sections.map((item) => (\n      <Chip\n        onClick={() => choseSection(item._id)}\n        label={item[currentLanguage]}\n        key={item._id}\n        variant=\"outlined\"\n        style={highLightSection(item._id)}\n        className={`${classes.customChip}`}\n      />\n    ))\n  }\n  return <div className=\"SectionMenu-wrapper\">{sectionsComponents()}</div>\n}\n\nexport default SectionMenu\n","import { IKContext, IKImage } from 'imagekitio-react'\n\nexport const ImageKit = (props) => {\n  const { photoUrl, width } = props\n\n  const urlEndpoint = 'https://ik.imagekit.io/scqtro3md'\n  return (\n    <IKContext urlEndpoint={urlEndpoint}>\n      <IKImage\n        style={{\n          marginTop: '10px',\n          marginLeft: 'auto',\n          marginRight: 'auto',\n          display: 'block',\n        }}\n        path={photoUrl}\n        transformation={[\n          {\n            height: width,\n            width: width,\n          },\n        ]}\n      />\n    </IKContext>\n  )\n}\n","import React from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\nimport '../../styles/App.css'\nimport { ImageKit } from './ImageKit'\nimport { Link } from 'react-router-dom'\n\ninterface AdvertCardProps {\n  mainPhotoUrl: string\n  advertId: string\n  photoWidth: number\n}\n\nexport const AdvertCard: React.FC<AdvertCardProps> = ({\n  mainPhotoUrl,\n  advertId,\n  photoWidth,\n}) => {\n  return (\n    <Link to={`/advert/${advertId}`}>\n      <Card>\n        <CardActionArea>\n          {photoWidth && (\n            <ImageKit photoUrl={mainPhotoUrl} width={photoWidth} />\n          )}\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              Lizard\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              Lizards are a widespread group of squamate reptiles, with over\n              6,000 species, ranging across all continents except Antarctica\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    </Link>\n  )\n}\n","import { useSelector } from 'react-redux'\nimport '../../styles/App.css'\nimport { AdvertCard } from './AdvertCard'\nimport { RootState } from '../../reduxAppStore/rootReducer'\nimport { useEffect, useState, createRef } from 'react'\nimport Grid from '@material-ui/core/Grid'\n\nconst AdvertBlock = () => {\n  const allAdverts = useSelector(\n    (state: RootState) => state.advertisements.allAdverts,\n  )\n\n  const [imgContainerWidth, setImgContainerWidth] = useState<null | number>(\n    null,\n  )\n\n  const ref = createRef<HTMLDivElement>()\n\n  //get width for advert photo\n  useEffect(() => {\n    if (ref.current) {\n      const containerWidth = ref.current.clientWidth\n      setImgContainerWidth(containerWidth)\n    }\n  }, [ref])\n\n  //return adverts cards\n  const normalizeAdvertArray = () => {\n    let fake: unknown[] = []\n    //make every row with not less then 3 columns by addin empty div\n    if (allAdverts.length % 3 > 0) {\n      fake = [1, 2].map((item) => (\n        <div key={item} className=\"Advert-column\"></div>\n      ))\n    }\n    let cards = allAdverts.map((item) => {\n      return (\n        <Grid className=\"Advert-column\" key={item._id} ref={ref}>\n          {imgContainerWidth && (\n            <AdvertCard\n              mainPhotoUrl={item.mainPhoto}\n              advertId={item._id}\n              photoWidth={imgContainerWidth - 20}\n            />\n          )}\n        </Grid>\n      )\n    })\n    return [...cards, ...fake]\n  }\n\n  return <div className=\"AdvertBlock-wrapper\">{normalizeAdvertArray()}</div>\n}\n\nexport default AdvertBlock\n","import Grid from '@material-ui/core/Grid'\nimport { useParams } from 'react-router-dom'\nimport Paper from '@material-ui/core/Paper'\nimport EuroIcon from '@material-ui/icons/Euro'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../../reduxAppStore/rootReducer'\nimport { ImageKit } from '../ImageKit'\nimport useStyles from '../../../styles/materialCustomStyles'\nimport Divider from '@material-ui/core/Divider'\nimport { useRef, useEffect, useState, createRef } from 'react'\n\nconst AdvertPage = () => {\n  //get advertId from url\n  const { advertId } = useParams<{ advertId: string }>()\n\n  const classes = useStyles()\n\n  const allAdverts = useSelector(\n    (state: RootState) => state.advertisements.allAdverts,\n  )\n\n  //get current language from Redux store\n  const currentLanguage = useSelector((state: RootState) => state.language.lang)\n\n  //find advert by id\n  const advert = allAdverts.filter((item) => item._id === advertId)[0]\n\n  //component with info about advert and price\n  const advertInfo = (\n    <Paper\n      key=\"123\"\n      elevation={3}\n      className={`${classes.advertPaper} ${classes.advertInfoPaper}`}\n    >\n      <Grid container justify=\"space-between\" alignItems=\"center\" wrap=\"nowrap\">\n        <Grid item xs={9}>\n          {advert ? advert[currentLanguage] : null}\n        </Grid>\n\n        <Grid item xs={3}>\n          <Grid container justify=\"flex-end\">\n            <Divider orientation=\"vertical\" flexItem />\n            <Grid item>\n              <Grid\n                container\n                wrap=\"nowrap\"\n                justify=\"space-evenly\"\n                alignItems=\"center\"\n              >\n                <span className={`${classes.price}`}>\n                  {' '}\n                  {advert ? advert.price : null}{' '}\n                </span>\n                <EuroIcon fontSize=\"small\" />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Paper>\n  )\n\n  const [imgContainerWidth, setImgContainerWidth] =\n    useState<null | number>(null)\n\n  let ref = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (ref.current) {\n      const containerWidth = ref.current.clientWidth\n\n      if (containerWidth > 700) {\n        setImgContainerWidth(600)\n      } else {\n        const width = containerWidth / 1.2\n        setImgContainerWidth(width)\n      }\n    }\n  }, [])\n\n  const advertInfoAndPhotos = () => {\n    return advert.allPhotos.map((item, i) => {\n      if (!item) return null\n      if (i === 0) return advertInfo\n      return (\n        <>\n          {imgContainerWidth && (\n            <ImageKit photoUrl={item} width={imgContainerWidth} />\n          )}\n        </>\n      )\n    })\n  }\n\n  return (\n    <Grid container justify=\"center\" ref={ref}>\n      <Grid container direction=\"column\" alignItems=\"center\">\n        <Grid item>{advert ? advertInfoAndPhotos() : null}</Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default AdvertPage\n","import './styles/App.css'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport store from './reduxAppStore/store'\nimport InfoContacts from './components/infoContacts/InfoContacts'\nimport SectionMenu from './components/sectionMenu/SectionMenu'\nimport AdvertBlock from './components/advert/AdvertBlock'\nimport AdvertPage from './components/advert/advertPage/AdvertPage'\n\nfunction App() {\n  return (\n    <div className=\"App-wrapper\">\n      <Provider store={store}>\n        <InfoContacts />\n        <Router>\n          <Switch>\n            <Route path=\"/advert/:advertId\">\n              <AdvertPage />\n            </Route>\n            <Route path=\"/\">\n              <SectionMenu />\n              <AdvertBlock />\n            </Route>\n          </Switch>\n        </Router>\n      </Provider>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}